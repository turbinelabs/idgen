/*
Copyright 2018 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Package idgen defines an ID type, and the IDGen type, which can be used to
// generate IDs. It also defines several IDGen implementations.
package idgen

import (
	"strconv"
	"sync/atomic"

	uuid "github.com/nu7hatch/gouuid"
)

type ID string

const NilID = ID("")

// IDGen is a function that generates either an ID or an error
type IDGen func() (ID, error)

// NewUUID produces an IDGen which will produce v4 UUIDs.
func NewUUID() IDGen {
	return func() (ID, error) {
		uid, err := uuid.NewV4()
		if err != nil {
			return NilID, err
		}
		return ID(uid.String()), nil
	}
}

// NewCounter produces an IDGen which will produce IDs derived from a counter,
// offset from the given start value. Each call to the function will atomically
// increment the underlyinc counter. This IDGen should only be used for testing,
// when predictable ID values are needed.
func NewCounter(start uint64) IDGen {
	var counter uint64 = start
	return func() (ID, error) {
		intId := atomic.AddUint64(&counter, 1)
		strId := strconv.FormatUint(intId, 10)
		return ID(strId), nil
	}
}

// NewPrefixing produces an IDGen which will apply the given prefix string
// to IDs generated by the given IDGen
func NewPrefixing(prefix string, newID IDGen) IDGen {
	return func() (ID, error) {
		id, err := newID()
		if err != nil {
			return NilID, err
		}
		return ID(prefix + string(id)), nil
	}
}
